import java.util.Scanner;

public class DeleteEveryNnodes {
	
	public static Node deleteNodes(Node head, int m, int n)
    {
        // base case
        if (head == null || head.next == null) {
            return head;
        }
 
        Node prev = null, next;
        Node curr = head;
 
        // skip `m` nodes
        for (int i = 0; curr != null && i <= m; i++)
        {
            prev = curr;
            curr = curr.next;
        }
 
        // delete next `n` nodes
        for (int i = 0; curr != null && i <= n; i++)
        {
            next = curr.next;
            curr = next;
        }
 
        // link remaining nodes with the last node
        prev.next = curr;
 
        // recur for remaining nodes
        deleteNodes(curr, m, n);
 
        return prev;
    }
			  	
	public static void PrintLinked(Node<Integer> head) {
		while (head != null) {
			System.out.print(head.data + " ");
			head = head.next;
		}

	}

	public static Node<Integer> takeInput() {
		Scanner s = new Scanner(System.in);
		int data = s.nextInt();
		Node<Integer> head = null, tail = null;
		while (data != -1) {
			Node<Integer> newNode = new Node<Integer>(data);
			if (head == null) {
				head = newNode;
				tail = newNode;
			} else {
				tail.next = newNode;
				tail = tail.next; // tail = currentNode
			}
			data = s.nextInt();
		}
		return head;
	}

	public static void main(String args[]) {
		Scanner s = new Scanner(System.in);
		int t = s.nextInt();
		while(t>0) {
		Node<Integer> head = takeInput();
		int m = s.nextInt();
		int n = s.nextInt();
		head = deleteNodes(head,m,n);
		PrintLinked(head);
		
		System.out.println();
		t--;
	 }

	}
}
