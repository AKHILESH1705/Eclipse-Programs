import java.util.Scanner;

public class DeleteNodeRecursivley {

	public static Node<Integer> DeleteNode(Node<Integer> head, int pos) {

		if (head == null) {
			return head;
		}
		if (pos == 0) {
			return head.next;
		} else {
			head.next = DeleteNode(head.next, pos -1);
			return head;
		}
	}

	public static void PrintLinked(Node<Integer> head) {
		while (head != null) {
			System.out.print(head.data + " ");
			head = head.next;
		}

	}

	public static Node<Integer> takeInput() {
		Scanner s = new Scanner(System.in);
		int data = s.nextInt();
		Node<Integer> head = null, tail = null;
		while (data != -1) {
			Node<Integer> newNode = new Node<Integer>(data);
			if (head == null) {
				head = newNode;
				tail = newNode;
			} else {
				tail.next = newNode;
				tail = tail.next; // tail = currentNode
			}
			data = s.nextInt();
		}
		return head;
	}

	public static void main(String args[]) {
		Scanner s = new Scanner(System.in);
		Node<Integer> head = takeInput();
		head = DeleteNode(head,2);

		// System.out.println();
		// Reverse(head);
		PrintLinked(head);

	}
}



public static SinglyLinkedListNode DeleteNode(SinglyLinkedListNode head, int pos) {

	if (head == null) {
		return head;
	}
	if (pos == 1) {
		return head.next;
	} else {
		head.next = DeleteNode(head.next, pos -1);
		return head;
	}
}

static class SinglyLinkedListNode {
public int data;
public SinglyLinkedListNode next;
public SinglyLinkedListNode(int nodeData) {
this.data = nodeData;
this.next = null;
}
}
static class SinglyLinkedList {
public SinglyLinkedListNode head;
public SinglyLinkedListNode tail;

public SinglyLinkedList() {
this.head = null;
this.tail = null;
}

public void insertNode(int nodeData) {
SinglyLinkedListNode node = new SinglyLinkedListNode(nodeData);

if (this.head == null) {
    this.head = node;
} else {
    this.tail.next = node;
}

this.tail = node;
}
}
static void printLinkedList(SinglyLinkedListNode head)
{
SinglyLinkedListNode temp=head;
while(temp!=null)
{
System.out.print(temp.data+" ");
temp=temp.next;
}
System.out.println();
}


private static final Scanner scanner = new Scanner(System.in);

public static void main(String args[]) throws IOException {

int testCases = scanner.nextInt();

while (testCases-- > 0) {
SinglyLinkedList llist = new SinglyLinkedList();

int llistCount = scanner.nextInt();
int pos = scanner.nextInt();
for (int i = 0; i < llistCount; i++) {
    int llistItem = scanner.nextInt();

    llist.insertNode(llistItem);
}

printLinkedList(DeleteNode(llist.head,pos));

}

scanner.close();
}












































