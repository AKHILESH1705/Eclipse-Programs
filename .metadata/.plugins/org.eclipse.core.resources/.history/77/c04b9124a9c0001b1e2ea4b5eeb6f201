import java.util.Scanner;

public class EvenafterOddvoidType {

	public static void  EvenOddLinked(Node<Integer>head){
		if (head == null)
	        return;
	 
	    // Initialize first Node<Integer>s of even and
	    // odd lists
	    Node<Integer> odd = head;
	    Node<Integer> even = head.next;
	 
	    // Remember the first Node<Integer> of even list so
	    // that we can connect the even list at the
	    // end of odd list.
	    Node<Integer> evenFirst = even;
	 
	    while (1 == 1)
	    {
	        // If there are no more Node<Integer>s, 
	        // then connect first Node<Integer> of even 
	        // list to the last Node<Integer> of odd list
	        if (odd == null || even == null ||
	                        (even.next) == null)
	        {
	            odd.next = evenFirst;
	            break;
	        }
	 
	        // Connecting odd Node<Integer>s
	        odd.next = even.next;
	        odd = even.next;
	 
	        // If there are NO more even Node<Integer>s 
	        // after current odd.
	        if (odd.next == null)
	        {
	            even.next = null;
	            odd.next = evenFirst;
	            break;
	        }
	 
	        // Connecting even Node<Integer>s
	        even.next = odd.next;
	        even = odd.next;
	    }
	    return head;
	}
	 
	// A utility function to print a linked list
	static void printlist(Node<Integer> Node<Integer>)
	{
	    while (Node<Integer> != null)
	    {
	        System.out.print(Node<Integer>.data + "->");
	        Node<Integer> = Node<Integer>.next;
	    }
	    System.out.println("NULL") ;
	}
	 
	}  	
	  	
	public static void PrintLinked(Node<Integer> head) {
		while (head != null) {
			System.out.print(head.data + " ");
			head = head.next;
		}

	}

	public static Node<Integer> takeInput() {
		Scanner s = new Scanner(System.in);
		int data = s.nextInt();
		Node<Integer> head = null, tail = null;
		while (data != -1) {
			Node<Integer> newNode= new Node<Integer>(data);
			if (head == null) {
				head = newNode<Integer>;
				tail = newNode<Integer>;
			} else {
				tail.next = newNode<Integer>;
				tail = tail.next; // tail = currentNode<Integer>
			}
			data = s.nextInt();
		}
		return head;
	}

	public static void main(String args[]) {
		Node<Integer> head = takeInput();
		EvenOddLinked(head);
		PrintLinked(head);

	}
}
